/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useRef, useState, useCallback } from 'react'
import { useLoader, useFrame } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'

export default function Model(props) {
  const group = useRef()
  const { nodes, materials, animations } = useLoader(GLTFLoader, '/models/fox/glTF-Embedded/Fox.gltf')

  const actions = useRef()
  const [mixer] = useState(() => new THREE.AnimationMixer())
  const animationRef = useRef(0);
  const actionRef = useRef();
  useFrame((state, delta) => mixer.update(delta))
  useEffect(() => {
    actions.current = {
      Survey: mixer.clipAction(animations[0], group.current),
      Walk: mixer.clipAction(animations[1], group.current),
      Run: mixer.clipAction(animations[2], group.current)
    }
    actions.current.Survey.play();
    actions.current.Survey.weight = 1;
    actions.current.Walk.play();
    actions.current.Walk.weight = 0;
    actions.current.Run.play();
    actions.current.Run.weight = 0;
    actionRef.current = actions.current.Survey;
    return () => animations.forEach(clip => mixer.uncacheClip(clip))
  }, [])

  const onClick = useCallback(() => {
    /*
    const animations = Object.keys(actions.current);
    mixer.stopAllAction();
    animationRef.current = (animationRef.current + 1) % animations.length;
    actions.current[animations[animationRef.current]].play();
    */

    /* HERE IS AN EXAMPLE OF MIXING multiple animationActions using weights */
/*    actions.current.Survey.weight = 1.0;
    actions.current.Survey.play();
    actions.current.Run.weight = 0;
    actions.current.Run.play();*/

    const animationKeys = Object.keys(actions.current);
    // mixer.stopAllAction();
    animationRef.current = (animationRef.current + 1) % animationKeys.length;
    const newKey = animationKeys[animationRef.current];
    const endAction = actions.current[newKey];
    endAction.time = 0;
//    endAction.weight = 1;
    console.log(newKey);
    actionRef.current.crossFadeTo(actions.current[newKey], 1, true);

  }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <scene>
        <group name="root">
          <primitive object={nodes._rootJoint} />
          <skinnedMesh
            material={materials.fox_material}
            geometry={nodes.fox.geometry}
            skeleton={nodes.fox.skeleton}
            name="fox"
            onClick={onClick}
          />
        </group>
      </scene>
    </group>
  )
}
